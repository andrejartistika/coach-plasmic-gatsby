// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7JM2c9rKsJq2MtgHpQAyH
// Component: DNn9rEuqOu
import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsgyi9F2CGadx1Xj } from "../copy_of_coach_website/PlasmicGlobalVariant__Screen"; // plasmic-import: GYI9F2cGadx1XJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "../copy_of_coach_website/plasmic_copy_of_coach_website.module.css"; // plasmic-import: n7JM2c9rKsJq2MtgHpQAyH/projectcss
import * as sty from "./PlasmicPrimaryCtaButton.module.css"; // plasmic-import: DNn9rEuqOu/css

import buttonCaretWhitesvg2EkMgwDrEmqPnVl from "../copy_of_coach_website/images/buttonCaretWhitesvg2.svg"; // plasmic-import: ekMgwDrEmqPnVl/picture

export type PlasmicPrimaryCtaButton__VariantMembers = {};
export type PlasmicPrimaryCtaButton__VariantsArgs = {};
type VariantPropType = keyof PlasmicPrimaryCtaButton__VariantsArgs;
export const PlasmicPrimaryCtaButton__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPrimaryCtaButton__ArgsType = {};
type ArgPropType = keyof PlasmicPrimaryCtaButton__ArgsType;
export const PlasmicPrimaryCtaButton__ArgProps = new Array<ArgPropType>();

export type PlasmicPrimaryCtaButton__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  text?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultPrimaryCtaButtonProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicPrimaryCtaButton__RenderFunc(props: {
  variants: PlasmicPrimaryCtaButton__VariantsArgs;
  args: PlasmicPrimaryCtaButton__ArgsType;
  overrides: PlasmicPrimaryCtaButton__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgyi9F2CGadx1Xj()
  });

  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      component={Link}
      href={"https://calendly.com/kalina-t/30min" as const}
      platform={"gatsby"}
      target={"_blank" as const}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {hasVariant(globalVariants, "screen", "mobileOnly")
          ? "GET STARTED"
          : "GET STARTED"}
      </div>

      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"auto" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"100%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"15px" as const}
        loading={"lazy" as const}
        src={{
          src: buttonCaretWhitesvg2EkMgwDrEmqPnVl,
          fullWidth: 108,
          fullHeight: 150,
          aspectRatio: 0.722222
        }}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "img"],
  text: ["text"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "a";
  text: "div";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPrimaryCtaButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPrimaryCtaButton__VariantsArgs;
    args?: PlasmicPrimaryCtaButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPrimaryCtaButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPrimaryCtaButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPrimaryCtaButton__ArgProps,
          internalVariantPropNames: PlasmicPrimaryCtaButton__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPrimaryCtaButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPrimaryCtaButton";
  } else {
    func.displayName = `PlasmicPrimaryCtaButton.${nodeName}`;
  }
  return func;
}

export const PlasmicPrimaryCtaButton = Object.assign(
  // Top-level PlasmicPrimaryCtaButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicPrimaryCtaButton
    internalVariantProps: PlasmicPrimaryCtaButton__VariantProps,
    internalArgProps: PlasmicPrimaryCtaButton__ArgProps
  }
);

export default PlasmicPrimaryCtaButton;
/* prettier-ignore-end */
