// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7JM2c9rKsJq2MtgHpQAyH
// Component: todkiqyH0YNqx
import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ReusableHeader from "../../ReusableHeader"; // plasmic-import: aZG1o9ts_1BbAO/component
import PrimaryCtaButton from "../../PrimaryCtaButton"; // plasmic-import: DNn9rEuqOu/component
import Button from "../../Button"; // plasmic-import: HFQysdji1yD9Yg/component
import { ShowcaseComponentMobile } from "components/Showcase/ShowcaseComponentMobile"; // plasmic-import: rWm0V-GKKDqfP_/codeComponent
import { ShowcaseComponent } from "components/Showcase/ShowcaseComponent"; // plasmic-import: 3rNeoH1I_fqFT8/codeComponent
import CustomSlider from "components/CustomSlider/CustomSlider"; // plasmic-import: hdy57beJQC/codeComponent
import IndustryCard from "../../IndustryCard"; // plasmic-import: GAiHy1uvAVjk52/component
import Footer from "../../Footer"; // plasmic-import: yHbgPlkcGh0BHH/component

import { useScreenVariants as useScreenVariantsgyi9F2CGadx1Xj } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GYI9F2cGadx1XJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_coach_website.module.css"; // plasmic-import: n7JM2c9rKsJq2MtgHpQAyH/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: todkiqyH0YNqx/css

import CorrectsvgIcon from "./icons/PlasmicIcon__Correctsvg"; // plasmic-import: DlYNhYJ3qngorz/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: ygnpRbGipc6tPF/icon
import DownArrowIcon from "./icons/PlasmicIcon__DownArrow"; // plasmic-import: 21ZYLfZ9UXFykz/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: Eg0Wi1P4Mcw9OO/icon
import bannerimg2PngYmglJ9DdJ from "../coach_website_gatsby/images/bannerimg2Png.png"; // plasmic-import: ymglJ9DdJ/picture
import group58PngMvc2RMleKXbTz from "./images/group58Png.png"; // plasmic-import: MVC2rMleKXbTZ-/picture
import group937SvgOzNkuZf699WA2 from "./images/group937Svg.svg"; // plasmic-import: OZNkuZf699w-A2/picture
import frame910JpgHtHzLexrwy3Eck from "./images/frame910Jpg.jpeg"; // plasmic-import: htHzLEXRWY3eck/picture
import frame909JpgNF6XKwmgxeZqZ from "./images/frame909Jpg.jpeg"; // plasmic-import: nF6xKwmgxeZq-Z/picture
import frame908JpgUjX6WhasuoKapS from "./images/frame908Jpg.jpeg"; // plasmic-import: ujX6WHASUOKapS/picture
import group926SvgK77K9Hi618J0Ck from "./images/group926Svg.svg"; // plasmic-import: K77K9Hi618J0Ck/picture
import _1AddContentpng2SfY5POiCtJy1Lz from "./images/_1AddContentpng2.png"; // plasmic-import: SfY5pOiCTJy1LZ/picture
import crookedBg4SvgEgHr6CfLReKtQ from "./images/crookedBg4Svg.svg"; // plasmic-import: EgHR6cfLRe-ktQ/picture
import _2DeployAndPlaypng2W6PiB1EyHkMfx1 from "./images/_2DeployAndPlaypng2.png"; // plasmic-import: W6piB1eyHKMfx1/picture
import group925SvgDq4BIaLnGvulx2 from "./images/group925Svg.svg"; // plasmic-import: DQ4bIaLnGVULX2/picture
import crookedBg3SvgTQXwed72YVMhi from "./images/crookedBg3Svg.svg"; // plasmic-import: tQXwed72y_vMhi/picture
import group924SvgPiZmzioOuCOf6W from "./images/group924Svg.svg"; // plasmic-import: PiZMZIOOuCOf6W/picture
import _3TrackAndImprovepng2Ua7IspOhVqdD8N from "./images/_3TrackAndImprovepng2.png"; // plasmic-import: Ua7ISPOhVqdD8N/picture
import testimonialimgIvanapngWGjrKnFvOzCji8 from "./images/testimonialimgIvanapng.png"; // plasmic-import: wGJRKnFVOzCJI8/picture
import testimonialLogoSpringwellpngQ3Lsx7GksnNn1G from "./images/testimonialLogoSpringwellpng.png"; // plasmic-import: Q3Lsx7GksnNN1g/picture
import coachManagerssvgScQ7M8YNbWgn81 from "./images/coachManagerssvg.svg"; // plasmic-import: ScQ7M8yNBWgn81/picture
import coachSeossvgAPamuRzFsd5YO from "./images/coachSeossvg.svg"; // plasmic-import: aPAMURzFSD5y-o/picture
import coachIdssvg2KI349Tcn0QAmz from "./images/coachIdssvg.svg"; // plasmic-import: 2kI349Tcn0qAMZ/picture
import coachEmployeessvgHgVkWna4YYjwz from "./images/coachEmployeessvg.svg"; // plasmic-import: hgVkWna4Y_yjwz/picture
import _287StartupFlatlinesvg1Ven9D9JoBomE from "./images/_287StartupFlatlinesvg.svg"; // plasmic-import: 1VEN9-D9JoBomE/picture
import buttonCaretWhitesvg2EkMgwDrEmqPnVl from "./images/buttonCaretWhitesvg2.svg"; // plasmic-import: ekMgwDrEmqPnVl/picture

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  whiteblueButton?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "whiteblueButton"
);

export type PlasmicHomepage__OverridesType = {
  root2?: p.Flex<"div">;
  reusableHeader?: p.Flex<typeof ReusableHeader>;
  section1?: p.Flex<"div">;
  copy?: p.Flex<"div">;
  primaryCtaButton?: p.Flex<typeof PrimaryCtaButton>;
  ctaBlog2?: p.Flex<"div">;
  section12?: p.Flex<"div">;
  section11?: p.Flex<"div">;
  section2?: p.Flex<"div">;
  section3?: p.Flex<"div">;
  section4?: p.Flex<"div">;
  whiteblueButton2?: p.Flex<typeof Button>;
  section5?: p.Flex<"div">;
  whiteblueButton3?: p.Flex<typeof Button>;
  section10?: p.Flex<"div">;
  showcaseComponentMobile?: p.Flex<typeof ShowcaseComponentMobile>;
  featuresButton?: p.Flex<typeof Button>;
  section13?: p.Flex<"div">;
  showcaseComponent?: p.Flex<typeof ShowcaseComponent>;
  section6?: p.Flex<"div">;
  section7?: p.Flex<"div">;
  section8?: p.Flex<"div">;
  ctaBlog?: p.Flex<"div">;
  section9?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultHomepageProps {
  whiteblueButton?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

export function Head() {
  return (
    <>
      <meta name="twitter:card" content="summary" />
      <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
      <meta
        key="og:title"
        property="og:title"
        content={PlasmicHomepage.pageMetadata.title}
      />
      <meta
        key="twitter:title"
        name="twitter:title"
        content={PlasmicHomepage.pageMetadata.title}
      />
    </>
  );
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgyi9F2CGadx1Xj()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root2"}
          data-plasmic-override={overrides.root2}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root2
          )}
        >
          <ReusableHeader
            data-plasmic-name={"reusableHeader"}
            data-plasmic-override={overrides.reusableHeader}
            className={classNames("__wab_instance", sty.reusableHeader)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"section1"}
            data-plasmic-override={overrides.section1}
            hasGap={true}
            className={classNames(projectcss.all, sty.section1)}
          >
            <div className={classNames(projectcss.all, sty.columns__wjny4)}>
              {true ? (
                <div className={classNames(projectcss.all, sty.column___8KodG)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__rjW84)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"copy"}
                      data-plasmic-override={overrides.copy}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.copy)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__l9Y7O
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__k0VyD
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            {
                              <h1
                                className={classNames(
                                  projectcss.all,
                                  projectcss.h1,
                                  projectcss.__wab_text,
                                  sty.h1__gtcF
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "Simplified\nin-house training that scales."
                                  : "Simplified in-house training that scales."}
                              </h1>
                            }
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__f59Bb
                          )}
                        >
                          {
                            "Coach helps companies detect and fix knowledge gaps through personalized training."
                          }
                        </div>
                      </p.Stack>

                      <PrimaryCtaButton
                        data-plasmic-name={"primaryCtaButton"}
                        data-plasmic-override={overrides.primaryCtaButton}
                        className={classNames(
                          "__wab_instance",
                          sty.primaryCtaButton
                        )}
                      />
                    </p.Stack>
                  </p.Stack>
                </div>
              ) : null}

              <div className={classNames(projectcss.all, sty.column___8SpJ)}>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : hasVariant(globalVariants, "screen", "tablet")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__oirl1)}
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__hLkRg)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"800px" as const}
                    displayMaxWidth={"1050px" as const}
                    displayMinHeight={"340px" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100%" as const)
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? ("85%" as const)
                        : ("100%" as const)
                    }
                    src={{
                      src: bannerimg2PngYmglJ9DdJ,
                      fullWidth: 2155,
                      fullHeight: 2116,
                      aspectRatio: undefined
                    }}
                  />
                ) : null}
              </div>
            </div>
          </p.Stack>

          <div
            data-plasmic-name={"ctaBlog2"}
            data-plasmic-override={overrides.ctaBlog2}
            className={classNames(projectcss.all, sty.ctaBlog2)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"section12"}
              data-plasmic-override={overrides.section12}
              hasGap={true}
              className={classNames(projectcss.all, sty.section12)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__miCt
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#3E7CB1" }}
                    >
                      {"Coach "}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"is here to change the learning game."}
                    </span>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#3E7CB1" }}
                    >
                      {"Coach "}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"is here to change the learning game."}
                    </span>
                  </React.Fragment>
                )}
              </h2>

              <div className={classNames(projectcss.all, sty.freeBox__o7Qyy)} />
            </p.Stack>

            <div className={classNames(projectcss.all, sty.columns__bM7P)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__yHkVq)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__nbozN)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"135px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: group58PngMvc2RMleKXbTz,
                      fullWidth: 406,
                      fullHeight: 328,
                      aspectRatio: undefined
                    }}
                  />
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___6L2Y6)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("auto" as const)
                        : ("auto" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("231px" as const)
                        : ("263px" as const)
                    }
                    loading={"lazy" as const}
                    src={{
                      src: group937SvgOzNkuZf699WA2,
                      fullWidth: 300,
                      fullHeight: 74,
                      aspectRatio: 4.078652
                    }}
                  />
                ) : null}
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0EPnM)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__z5P2E
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Deliver bite-sized, interactive learning modules that are tailored to your needs and preferences.  \n\nSay goodbye to boring, ineffective training and hello to a whole new world of learning."
                        : "Deliver bite-sized, interactive learning modules that are tailored to your needs and preferences.  \n\nSay goodbye to boring, ineffective training and hello to a whole new world of learning."}
                    </h1>
                  </div>
                ) : null}
              </p.Stack>
            </div>

            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"section11"}
                data-plasmic-override={overrides.section11}
                hasGap={true}
                className={classNames(projectcss.all, sty.section11)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__iDi9C
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"Our latest \n"}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#3E7CB1" }}
                    >
                      {"news and resources"}
                    </span>
                  </React.Fragment>
                </h1>

                <div
                  className={classNames(projectcss.all, sty.freeBox__anAu5)}
                />
              </p.Stack>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.columns__cvY4)}>
                <div className={classNames(projectcss.all, sty.column__wRzEk)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ov0SL)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__taYj4)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: frame910JpgHtHzLexrwy3Eck,
                        fullWidth: 323,
                        fullHeight: 203,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iFb
                      )}
                    >
                      {"PRESS ARTICLE"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bHAeC
                      )}
                    >
                      {"Konceptiva: startup of the month January ’22!"}
                    </div>
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.column__xKgBj)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___8J2Pj)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__lHHk)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: frame909JpgNF6XKwmgxeZqZ,
                        fullWidth: 323,
                        fullHeight: 203,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c58Nf
                      )}
                    >
                      {"EVENT"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bCsv2
                      )}
                    >
                      {"Gamification of Corporate\nTraining - #Session1"}
                    </div>
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.column__vLUtK)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fzkcB)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__pkVjb)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: frame908JpgUjX6WhasuoKapS,
                        fullWidth: 323,
                        fullHeight: 203,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pt5Wi
                      )}
                    >
                      {"BLOG"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___13Xpt
                      )}
                    >
                      {"Here are 5 tips for creating\nan effective course"}
                    </div>
                  </p.Stack>
                </div>
              </div>
            ) : null}
          </div>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__dlj09)}>
              <div
                data-plasmic-name={"section2"}
                data-plasmic-override={overrides.section2}
                className={classNames(projectcss.all, sty.section2)}
              >
                <div className={classNames(projectcss.all, sty.column__pLxu6)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__boGe)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___8R2MY)}
                      displayHeight={"37px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: group926SvgK77K9Hi618J0Ck,
                        fullWidth: 300,
                        fullHeight: 76,
                        aspectRatio: 3.959184
                      }}
                    />

                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2___8MiaH
                      )}
                    >
                      {"Prepare training content faster"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__w6PRv
                      )}
                    >
                      {
                        "Let's face it – creating training content from scratch can be a daunting and time-consuming task. \n\nCoach lets you import content you already have and easily create new modules. If you don't have the time - let our team take care of it! Cover company-specific knowledge like product training, procedures & safety, sales training, and onboarding with a few clicks. "
                      }
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__t0E7A)}
                    >
                      <CorrectsvgIcon
                        className={classNames(projectcss.all, sty.svg__ucWsg)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4RxyK
                        )}
                      >
                        {"LESSONS IN ANY FORMAT"}
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__xYw1T)}
                    >
                      <CorrectsvgIcon
                        className={classNames(projectcss.all, sty.svg__yj9Yi)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__evKn
                        )}
                      >
                        {"UNLIMITED TRAINING MODULES"}
                      </div>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___92Cgp
                      )}
                    >
                      <CorrectsvgIcon
                        className={classNames(projectcss.all, sty.svg___2MJut)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q2IWf
                        )}
                      >
                        {"AUTOGENERATE QUESTIONS "}
                      </div>
                    </div>
                  </div>
                </div>

                <div className={classNames(projectcss.all, sty.column___9EymB)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__o9NaW)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("367px" as const)
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? ("auto" as const)
                        : ("100%" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "tablet")
                        ? ("100%" as const)
                        : ("85%" as const)
                    }
                    loading={"lazy" as const}
                    src={{
                      src: _1AddContentpng2SfY5POiCtJy1Lz,
                      fullWidth: 1041,
                      fullHeight: 1100,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__xEpg)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__dOvyo)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: crookedBg4SvgEgHr6CfLReKtQ,
                fullWidth: 300,
                fullHeight: 14,
                aspectRatio: 20.869565
              }}
            />
          </div>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__foNy4)}>
              <div
                data-plasmic-name={"section3"}
                data-plasmic-override={overrides.section3}
                className={classNames(projectcss.all, sty.section3)}
              >
                <div className={classNames(projectcss.all, sty.column__t5Wnc)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__sZol8)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("372px" as const)
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? ("auto" as const)
                        : ("100%" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "tablet")
                        ? ("100%" as const)
                        : ("85%" as const)
                    }
                    loading={"lazy" as const}
                    src={{
                      src: _2DeployAndPlaypng2W6PiB1EyHkMfx1,
                      fullWidth: 1041,
                      fullHeight: 1100,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.column__mvNoz)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__h3KW4)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__oiQAi)}
                      displayHeight={"37px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: group925SvgDq4BIaLnGvulx2,
                        fullWidth: 300,
                        fullHeight: 74,
                        aspectRatio: 4.081633
                      }}
                    />

                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2___2Oh7J
                      )}
                    >
                      {"Breeze through training"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ygYd
                      )}
                    >
                      {
                        "Imagine completing your company training and feeling like you just played a game. \n\nCoach transforms learning into a fun, interactive game, that tests your knowledge and keeps you engaged.\nThrough games, Coach figures out your knowledge gaps, adapts the learning path, and assigns learning materials to help you improve. "
                      }
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__vzfvx)}
                    >
                      <CorrectsvgIcon
                        className={classNames(projectcss.all, sty.svg__kfikr)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yMlVl
                        )}
                      >
                        {"8 INTERACTIVE GAMES WITH DIFFERENT QUESTION TYPES"}
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__zU4Ll)}
                    >
                      <CorrectsvgIcon
                        className={classNames(projectcss.all, sty.svg___09CxU)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___04Hd7
                        )}
                      >
                        {"AVAILABLE ON ALL PLATFORMS AND LANGUAGES"}
                      </div>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3ImS6
                      )}
                    >
                      <CorrectsvgIcon
                        className={classNames(projectcss.all, sty.svg__vwllp)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8V787
                        )}
                      >
                        {"SCIENCE-BACKED LEARNING METHODOLOGY"}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__cCFml)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__t03Ab)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: crookedBg3SvgTQXwed72YVMhi,
                fullWidth: 300,
                fullHeight: 14,
                aspectRatio: 20.869565
              }}
            />
          </div>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__wBOba)}>
              <div
                data-plasmic-name={"section4"}
                data-plasmic-override={overrides.section4}
                className={classNames(projectcss.all, sty.section4)}
              >
                <div className={classNames(projectcss.all, sty.column__fFHbq)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vr5E1)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___43YUj)}
                      displayHeight={"37px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: group924SvgPiZmzioOuCOf6W,
                        fullWidth: 300,
                        fullHeight: 66,
                        aspectRatio: 4.530612
                      }}
                    />

                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__okHu0
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Track learning performance in real time"
                        : "Track learning performance in real time"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hn9Kt
                      )}
                    >
                      {
                        "Coach offers powerful analytics with hundreds of KPIs that allow you to see your knowledge gaps, track your progress, and get personalized recommendations for what to study next.\n\nManagers can now see how different teams and locations are performing – and use that data to drive the training efforts and make better decisions that improve performance."
                      }
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__hlIoG)}
                    >
                      <CorrectsvgIcon
                        className={classNames(projectcss.all, sty.svg__k8CgH)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tV0AQ
                        )}
                      >
                        {"MULTI-LEVEL INSIGHTS"}
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__gcqZt)}
                    >
                      <CorrectsvgIcon
                        className={classNames(projectcss.all, sty.svg__oHoaM)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bpQwB
                        )}
                      >
                        {"GENERATE & SHARE REPORTS"}
                      </div>
                    </div>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__z6Zkc)}
                    >
                      <CorrectsvgIcon
                        className={classNames(projectcss.all, sty.svg__rb0Fs)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__l5Bt
                        )}
                      >
                        {"DETECT PROBLEMS AND KNOWLEDGE GAPS"}
                      </div>
                    </div>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__troAw)}
                  >
                    {true
                      ? p.renderPlasmicSlot({
                          defaultContents: true ? (
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__xDxyK
                              )}
                              endIcon={
                                true ? (
                                  <DownArrowIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__tajad
                                    )}
                                    role={"img"}
                                  />
                                ) : null
                              }
                              link={`/features`}
                              showEndIcon={true}
                            >
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__bSaGx
                                  )}
                                >
                                  {"Explore all features"}
                                </div>
                              ) : null}
                            </Button>
                          ) : null,
                          value: args.whiteblueButton,
                          className: classNames(sty.slotTargetWhiteblueButton)
                        })
                      : null}
                  </div>
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column___5HkkZ)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___1Sbv6)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("372px" as const)
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? ("auto" as const)
                        : ("100%" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "tablet")
                        ? ("100%" as const)
                        : ("85%" as const)
                    }
                    loading={"lazy" as const}
                    src={{
                      src: _3TrackAndImprovepng2Ua7IspOhVqdD8N,
                      fullWidth: 1041,
                      fullHeight: 1100,
                      aspectRatio: undefined
                    }}
                  />

                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <Button
                      data-plasmic-name={"whiteblueButton2"}
                      data-plasmic-override={overrides.whiteblueButton2}
                      className={classNames(
                        "__wab_instance",
                        sty.whiteblueButton2
                      )}
                      endIcon={
                        <DownArrowIcon
                          className={classNames(projectcss.all, sty.svg__uqCNe)}
                          role={"img"}
                        />
                      }
                      showEndIcon={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5Oilv
                        )}
                      >
                        {"Explore all features"}
                      </div>
                    </Button>
                  ) : null}
                </p.Stack>
              </div>
            </div>
          ) : null}

          <div
            data-plasmic-name={"section5"}
            data-plasmic-override={overrides.section5}
            className={classNames(projectcss.all, sty.section5)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__xPiOj)} />

            <div className={classNames(projectcss.all, sty.columns__wMDo)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__bsO2U)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___6Jj9I)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("auto" as const)
                      : ("auto" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("231px" as const)
                      : ("320px" as const)
                  }
                  loading={"lazy" as const}
                  src={{
                    src: group937SvgOzNkuZf699WA2,
                    fullWidth: 300,
                    fullHeight: 74,
                    aspectRatio: 4.078652
                  }}
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns___3Ghic)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__hMh9B)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fqalg
                      )}
                    >
                      {'"Perfect tool!'}
                    </div>

                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__knV9W
                      )}
                    >
                      {
                        "I consider the discovery of Coach and the opportunity to apply it in a complex learning process through fun and team building, while also raising digital awareness in the organization, a privilege in my HR career. Coach is not only fun, engaging, and easy to use, it provides incredibly effective learning results in a very short time."
                      }
                    </h1>

                    {true ? (
                      <Button
                        data-plasmic-name={"whiteblueButton3"}
                        data-plasmic-override={overrides.whiteblueButton3}
                        className={classNames(
                          "__wab_instance",
                          sty.whiteblueButton3
                        )}
                        endIcon={
                          true ? (
                            <DownArrowIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___98Wg9
                              )}
                              role={"img"}
                            />
                          ) : null
                        }
                        showEndIcon={true}
                      >
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__hKw09
                            )}
                          >
                            {"READ FULL CASE STUDY"}
                          </div>
                        ) : null}
                      </Button>
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__ipMAt)}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__ilazF)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("160px" as const)
                            : ("270px" as const)
                        }
                        loading={"lazy" as const}
                        src={{
                          src: testimonialimgIvanapngWGjrKnFvOzCji8,
                          fullWidth: 810,
                          fullHeight: 810,
                          aspectRatio: undefined
                        }}
                      />
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__hLnoC)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__y9O7F)}
                        displayHeight={"60px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: testimonialLogoSpringwellpngQ3Lsx7GksnNn1G,
                          fullWidth: 301,
                          fullHeight: 196,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__crpGo
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {"Ivana Dojchinovska-Stojanovikj\n"}
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#3E7CB1" }}
                          >
                            {"People Management Consultant"}
                          </span>
                        </React.Fragment>
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </div>

            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"section10"}
                data-plasmic-override={overrides.section10}
                hasGap={true}
                className={classNames(projectcss.all, sty.section10)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2___4WAe8
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {
                          "By utilizing Coach, we make sure your training sticks."
                        }
                      </span>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"By utilizing Coach, we make sure\n "}
                      </span>
                      <React.Fragment>{"\n"}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"your training sticks."}
                      </span>
                    </React.Fragment>
                  )}
                </h2>

                <div
                  className={classNames(projectcss.all, sty.freeBox__iuMlz)}
                />

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <ShowcaseComponentMobile
                    data-plasmic-name={"showcaseComponentMobile"}
                    data-plasmic-override={overrides.showcaseComponentMobile}
                    className={classNames(
                      "__wab_instance",
                      sty.showcaseComponentMobile
                    )}
                    isLight={false}
                  />
                ) : null}

                <Button
                  data-plasmic-name={"featuresButton"}
                  data-plasmic-override={overrides.featuresButton}
                  className={classNames("__wab_instance", sty.featuresButton)}
                  link={`/features`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lyLwz
                    )}
                  >
                    {"SEE ALL FEATURES"}
                  </div>
                </Button>
              </p.Stack>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"section13"}
                data-plasmic-override={overrides.section13}
                hasGap={true}
                className={classNames(projectcss.all, sty.section13)}
              >
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__pmWxj
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {
                          "By utilizing Coach, we make sure your training sticks."
                        }
                      </span>
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#FFFFFF" }}
                      >
                        {"Make sure\n your training sticks."}
                      </span>
                    </React.Fragment>
                  )}
                </h2>

                <div
                  className={classNames(projectcss.all, sty.freeBox__k4C25)}
                />

                <ShowcaseComponent
                  data-plasmic-name={"showcaseComponent"}
                  data-plasmic-override={overrides.showcaseComponent}
                  buttonTitle={"See Features" as const}
                  className={classNames(
                    "__wab_instance",
                    sty.showcaseComponent
                  )}
                  isLight={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? false
                      : false
                  }
                  onClickNavigateToString={"features" as const}
                  showButton={true}
                />
              </p.Stack>
            ) : null}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"section6"}
            data-plasmic-override={overrides.section6}
            hasGap={true}
            className={classNames(projectcss.all, sty.section6)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fVNlj)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__a5SQ
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  <React.Fragment>
                    <React.Fragment>
                      {"Train employees in a wide "}
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#3E7CB1" }}
                    >
                      {"range of industries"}
                    </span>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <React.Fragment>
                      {"Train employees in a wide\n"}
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#3E7CB1" }}
                    >
                      {"range of industries"}
                    </span>
                  </React.Fragment>
                )}
              </h2>

              <div className={classNames(projectcss.all, sty.freeBox___3WnH)} />
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__uy5Nm)}>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <CustomSlider
                  arrows={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? false
                      : false
                  }
                  autoplay={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : false
                  }
                  autoplaySpeed={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (3000 as const)
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? (3000 as const)
                      : (500 as const)
                  }
                  centerMode={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : undefined
                  }
                  centerPadding={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("50px" as const)
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? ("30px" as const)
                      : undefined
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.customSlider__vfzs
                  )}
                  dotSlotWrapperStyle={{}}
                  dots={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? false
                      : undefined
                  }
                  fade={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? false
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? false
                      : undefined
                  }
                  focusOnSelect={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? false
                      : undefined
                  }
                  infinite={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : false
                  }
                  initialSlide={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (0 as const)
                      : (0 as const)
                  }
                  nextArrow={null}
                  pauseOnFocus={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? false
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : undefined
                  }
                  pauseOnHover={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : false
                  }
                  prevArrow={null}
                  rows={1 as const}
                  slideWrapperStyle={{}}
                  sliderWrapperStyle={{}}
                  slidesPerRow={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (1 as const)
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? (1 as const)
                      : (5 as const)
                  }
                  slidesToScroll={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (5 as const)
                      : (1 as const)
                  }
                  slidesToShow={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (1 as const)
                      : (1 as const)
                  }
                  swipe={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : false
                  }
                  swipeToSlide={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : undefined
                  }
                  touchMove={
                    hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : false
                  }
                  touchThreshold={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? (5 as const)
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? (5 as const)
                      : undefined
                  }
                  useCSS={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : false
                  }
                  variableWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  }
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__z03A
                      )}
                      component={Link}
                      href={`/industry-consumer-electronics`}
                      platform={"gatsby"}
                    >
                      <IndustryCard
                        className={classNames(
                          "__wab_instance",
                          sty.industryCard__dzLUc
                        )}
                        consumerElectronics={true}
                      />
                    </p.PlasmicLink>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__mZb7O
                      )}
                      component={Link}
                      href={`/industry-manufacturing`}
                      platform={"gatsby"}
                    >
                      <IndustryCard
                        className={classNames(
                          "__wab_instance",
                          sty.industryCard__bgJxz
                        )}
                        manufacturing={true}
                      />
                    </p.PlasmicLink>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__jtxGk
                      )}
                      component={Link}
                      href={`/industry-pharmaceuticals`}
                      platform={"gatsby"}
                    >
                      <IndustryCard
                        className={classNames(
                          "__wab_instance",
                          sty.industryCard__jd7Kd
                        )}
                        pharmaceuticals={true}
                      />
                    </p.PlasmicLink>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__gmD7P
                      )}
                      component={Link}
                      href={`/industry-telecommunication`}
                      platform={"gatsby"}
                    >
                      {true ? (
                        <IndustryCard
                          className={classNames(
                            "__wab_instance",
                            sty.industryCard__voXok
                          )}
                          telecom={true}
                        />
                      ) : null}
                    </p.PlasmicLink>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__tg2G0
                      )}
                      component={Link}
                      href={`/industry-luxury-goods`}
                      platform={"gatsby"}
                    >
                      {true ? (
                        <IndustryCard
                          className={classNames(
                            "__wab_instance",
                            sty.industryCard__lmS7U
                          )}
                          luxuryGoods={true}
                        />
                      ) : null}
                    </p.PlasmicLink>
                  ) : null}
                </CustomSlider>
              ) : null}
            </div>
          </p.Stack>

          <div className={classNames(projectcss.all, sty.freeBox__flydq)}>
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__uSgls)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: crookedBg3SvgTQXwed72YVMhi,
                fullWidth: 300,
                fullHeight: 14,
                aspectRatio: 20.869565
              }}
            />
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"section7"}
            data-plasmic-override={overrides.section7}
            hasGap={true}
            className={classNames(projectcss.all, sty.section7)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__f6OCs)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__y1S3S
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  "Who is it for?"
                ) : (
                  <React.Fragment>
                    <React.Fragment>{"Discover how "}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#3E7CB1" }}
                    >
                      {"Coach"}
                    </span>
                    <React.Fragment>{" helps professionals"}</React.Fragment>
                  </React.Fragment>
                )}
              </h2>

              <div
                className={classNames(projectcss.all, sty.freeBox___2MKtW)}
              />
            </p.Stack>

            <CustomSlider
              arrows={false}
              autoplay={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              centerMode={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              centerPadding={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("50px" as const)
                  : undefined
              }
              className={classNames("__wab_instance", sty.customSlider__pAzs5)}
              dotSlotWrapperStyle={{}}
              infinite={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              }
              nextArrow={
                <button
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    projectcss.__wab_text,
                    sty.button__hCcMa
                  )}
                >
                  {"Next"}
                </button>
              }
              pauseOnFocus={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              prevArrow={
                <button
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    projectcss.__wab_text,
                    sty.button__vnYxp
                  )}
                >
                  {"Prev"}
                </button>
              }
              slideWrapperStyle={{}}
              sliderWrapperStyle={{}}
              slidesPerRow={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (1 as const)
                  : (4 as const)
              }
              slidesToScroll={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (4 as const)
                  : undefined
              }
              swipeToSlide={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
              variableWidth={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : undefined
              }
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__um7Ql,
                  "" as const
                )}
                component={Link}
                href={`/who-is-it-for-managers`}
                platform={"gatsby"}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___5TmtN)}
                  role={"" as const}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ho24F)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"90%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: coachManagerssvgScQ7M8YNbWgn81,
                      fullWidth: 203,
                      fullHeight: 150,
                      aspectRatio: 1.354839
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cxVn1
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"Coach for "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#11253E", fontWeight: 700 }}
                      >
                        {"Managers"}
                      </span>
                      <React.Fragment>{"\n(HR, L&D, Training)"}</React.Fragment>
                    </React.Fragment>
                  </div>
                </p.Stack>
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__iyAW
                )}
                component={Link}
                href={`/who-is-it-for-ceos`}
                platform={"gatsby"}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__oZ9Zb)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ggIN)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"90%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: coachSeossvgAPamuRzFsd5YO,
                      fullWidth: 203,
                      fullHeight: 150,
                      aspectRatio: 1.354839
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___16WCf
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"Coach for "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"CEO's"}
                      </span>
                    </React.Fragment>
                  </div>
                </p.Stack>
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__brS2C
                )}
                component={Link}
                href={`/who-is-it-for-instructional-designers`}
                platform={"gatsby"}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__htihn)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__mFwzI)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"90%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: coachIdssvg2KI349Tcn0QAmz,
                      fullWidth: 203,
                      fullHeight: 150,
                      aspectRatio: 1.354839
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5V4Hq
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"Coach for "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Instructional Designers"}
                      </span>
                    </React.Fragment>
                  </div>
                </p.Stack>
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__k7H13
                )}
                component={Link}
                href={`/who-is-it-for-employees`}
                platform={"gatsby"}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__nPvQd)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__fFyel)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"90%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: coachEmployeessvgHgVkWna4YYjwz,
                      fullWidth: 203,
                      fullHeight: 150,
                      aspectRatio: 1.354839
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bAqSv
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{"Coach for "}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Employees"}
                      </span>
                    </React.Fragment>
                  </div>
                </p.Stack>
              </p.PlasmicLink>
            </CustomSlider>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"section8"}
            data-plasmic-override={overrides.section8}
            hasGap={true}
            className={classNames(projectcss.all, sty.section8)}
          >
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__i0UCa
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                <React.Fragment>
                  <React.Fragment>{"See how we can help you"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#3E7CB1" }}
                  >
                    {" transform the way knowledge is attained."}
                  </span>
                </React.Fragment>
              ) : (
                <React.Fragment>
                  <React.Fragment>{"See how we can help you\n"}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#3E7CB1" }}
                  >
                    {"transform the way knowledge is attained."}
                  </span>
                </React.Fragment>
              )}
            </h2>

            <div className={classNames(projectcss.all, sty.freeBox__nuHun)} />
          </p.Stack>

          <div
            data-plasmic-name={"ctaBlog"}
            data-plasmic-override={overrides.ctaBlog}
            className={classNames(projectcss.all, sty.ctaBlog)}
          >
            <div className={classNames(projectcss.all, sty.columns__foCv)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__qxHrJ)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hnRd9
                  )}
                >
                  {"READY TO START?"}
                </div>

                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1___8D8SL
                  )}
                >
                  {
                    "See the full power of Coach in action, and find out how it can help you reach your goals."
                  }
                </h1>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___7HT9J)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("auto" as const)
                        : hasVariant(globalVariants, "screen", "tablet")
                        ? ("240px" as const)
                        : ("310px" as const)
                    }
                    loading={"lazy" as const}
                    src={{
                      src: _287StartupFlatlinesvg1Ven9D9JoBomE,
                      fullWidth: 173,
                      fullHeight: 150,
                      aspectRatio: 1.155172
                    }}
                  />
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__zxIMk)}
                >
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___0F9K
                    )}
                    component={Link}
                    href={"https://calendly.com/kalina-t/30min" as const}
                    platform={"gatsby"}
                    target={"_blank" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__giVl
                      )}
                    >
                      {"BOOK A DEMO"}
                    </div>

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___61Lc2)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"15px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: buttonCaretWhitesvg2EkMgwDrEmqPnVl,
                        fullWidth: 108,
                        fullHeight: 150,
                        aspectRatio: 0.722222
                      }}
                    />
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </div>

            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"section9"}
                data-plasmic-override={overrides.section9}
                hasGap={true}
                className={classNames(projectcss.all, sty.section9)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__pu1Bu
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"Our latest \n"}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#3E7CB1" }}
                    >
                      {"news and resources"}
                    </span>
                  </React.Fragment>
                </h1>

                <div
                  className={classNames(projectcss.all, sty.freeBox__xHgRp)}
                />
              </p.Stack>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.columns__mHy7Z)}>
                <div className={classNames(projectcss.all, sty.column__s5ADs)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__g5AmS)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__eAr4J)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: frame910JpgHtHzLexrwy3Eck,
                        fullWidth: 323,
                        fullHeight: 203,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jMbZ5
                      )}
                    >
                      {"PRESS ARTICLE"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xDooF
                      )}
                    >
                      {"Konceptiva: startup of the month January ’22!"}
                    </div>
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.column__lrvSw)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__te6Fj)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__paKdw)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: frame909JpgNF6XKwmgxeZqZ,
                        fullWidth: 323,
                        fullHeight: 203,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iVvub
                      )}
                    >
                      {"EVENT"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l25Xv
                      )}
                    >
                      {"Gamification of Corporate\nTraining - #Session1"}
                    </div>
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.column___46Rz)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__t2Ume)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___1MZtd)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: frame908JpgUjX6WhasuoKapS,
                        fullWidth: 323,
                        fullHeight: 203,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u8T89
                      )}
                    >
                      {"BLOG"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Rf4S
                      )}
                    >
                      {"Here are 5 tips for creating\nan effective course"}
                    </div>
                  </p.Stack>
                </div>
              </div>
            ) : null}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__hVoNa)} />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root2: [
    "root2",
    "reusableHeader",
    "section1",
    "copy",
    "primaryCtaButton",
    "ctaBlog2",
    "section12",
    "section11",
    "section2",
    "section3",
    "section4",
    "whiteblueButton2",
    "section5",
    "whiteblueButton3",
    "section10",
    "showcaseComponentMobile",
    "featuresButton",
    "section13",
    "showcaseComponent",
    "section6",
    "section7",
    "section8",
    "ctaBlog",
    "section9",
    "footer"
  ],
  reusableHeader: ["reusableHeader"],
  section1: ["section1", "copy", "primaryCtaButton"],
  copy: ["copy", "primaryCtaButton"],
  primaryCtaButton: ["primaryCtaButton"],
  ctaBlog2: ["ctaBlog2", "section12", "section11"],
  section12: ["section12"],
  section11: ["section11"],
  section2: ["section2"],
  section3: ["section3"],
  section4: ["section4", "whiteblueButton2"],
  whiteblueButton2: ["whiteblueButton2"],
  section5: [
    "section5",
    "whiteblueButton3",
    "section10",
    "showcaseComponentMobile",
    "featuresButton",
    "section13",
    "showcaseComponent"
  ],
  whiteblueButton3: ["whiteblueButton3"],
  section10: ["section10", "showcaseComponentMobile", "featuresButton"],
  showcaseComponentMobile: ["showcaseComponentMobile"],
  featuresButton: ["featuresButton"],
  section13: ["section13", "showcaseComponent"],
  showcaseComponent: ["showcaseComponent"],
  section6: ["section6"],
  section7: ["section7"],
  section8: ["section8"],
  ctaBlog: ["ctaBlog", "section9"],
  section9: ["section9"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root2: "div";
  reusableHeader: typeof ReusableHeader;
  section1: "div";
  copy: "div";
  primaryCtaButton: typeof PrimaryCtaButton;
  ctaBlog2: "div";
  section12: "div";
  section11: "div";
  section2: "div";
  section3: "div";
  section4: "div";
  whiteblueButton2: typeof Button;
  section5: "div";
  whiteblueButton3: typeof Button;
  section10: "div";
  showcaseComponentMobile: typeof ShowcaseComponentMobile;
  featuresButton: typeof Button;
  section13: "div";
  showcaseComponent: typeof ShowcaseComponent;
  section6: "div";
  section7: "div";
  section8: "div";
  ctaBlog: "div";
  section9: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root2") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root2"),
  {
    // Helper components rendering sub-elements
    reusableHeader: makeNodeComponent("reusableHeader"),
    section1: makeNodeComponent("section1"),
    copy: makeNodeComponent("copy"),
    primaryCtaButton: makeNodeComponent("primaryCtaButton"),
    ctaBlog2: makeNodeComponent("ctaBlog2"),
    section12: makeNodeComponent("section12"),
    section11: makeNodeComponent("section11"),
    section2: makeNodeComponent("section2"),
    section3: makeNodeComponent("section3"),
    section4: makeNodeComponent("section4"),
    whiteblueButton2: makeNodeComponent("whiteblueButton2"),
    section5: makeNodeComponent("section5"),
    whiteblueButton3: makeNodeComponent("whiteblueButton3"),
    section10: makeNodeComponent("section10"),
    showcaseComponentMobile: makeNodeComponent("showcaseComponentMobile"),
    featuresButton: makeNodeComponent("featuresButton"),
    section13: makeNodeComponent("section13"),
    showcaseComponent: makeNodeComponent("showcaseComponent"),
    section6: makeNodeComponent("section6"),
    section7: makeNodeComponent("section7"),
    section8: makeNodeComponent("section8"),
    ctaBlog: makeNodeComponent("ctaBlog"),
    section9: makeNodeComponent("section9"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
