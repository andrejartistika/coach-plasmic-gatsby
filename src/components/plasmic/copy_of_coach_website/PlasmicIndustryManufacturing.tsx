// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: n7JM2c9rKsJq2MtgHpQAyH
// Component: 7JDui-MpqYJe0K
import * as React from "react";

import {
  Link,
  GatsbyLinkProps as LinkProps,
  navigate as __gatsbyNavigate
} from "gatsby";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ReusableHeader from "../../ReusableHeader"; // plasmic-import: aZG1o9ts_1BbAO/component
import Footer from "../../Footer"; // plasmic-import: yHbgPlkcGh0BHH/component

import { useScreenVariants as useScreenVariantsgyi9F2CGadx1Xj } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GYI9F2cGadx1XJ/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_copy_of_coach_website.module.css"; // plasmic-import: n7JM2c9rKsJq2MtgHpQAyH/projectcss
import * as sty from "./PlasmicIndustryManufacturing.module.css"; // plasmic-import: 7JDui-MpqYJe0K/css

import industryIconsManufacturingsvg3NgBo4E1JvuqFl from "./images/industryIconsManufacturingsvg.svg"; // plasmic-import: 3NgBo4e1JvuqFL/picture
import buttonCaretWhitesvg2EkMgwDrEmqPnVl from "./images/buttonCaretWhitesvg2.svg"; // plasmic-import: ekMgwDrEmqPnVl/picture
import illustrationBannerManufacturingpngL8ZU0VxZo2YS1Y from "./images/illustrationBannerManufacturingpng.png"; // plasmic-import: l8zU0VxZo2yS1Y/picture
import crookedBg3SvgTQXwed72YVMhi from "./images/crookedBg3Svg.svg"; // plasmic-import: tQXwed72y_vMhi/picture
import manufacturing1Png2ByeibGq8G67E1N from "./images/manufacturing1Png2.png"; // plasmic-import: byeibGQ8G67E1n/picture
import webOnboardingTrainingpngOUqtzJhkIipKw from "./images/webOnboardingTrainingpng.png"; // plasmic-import: OUqtzJhkIip_Kw/picture
import crookedBg4SvgEgHr6CfLReKtQ from "./images/crookedBg4Svg.svg"; // plasmic-import: EgHR6cfLRe-ktQ/picture
import webManufacturingSafetypngOmGcbIJqrKlVx from "./images/webManufacturingSafetypng.png"; // plasmic-import: omGCB_iJQRKlVx/picture
import webManufacturingProcedurespng7JUueBlYmFzPna from "./images/webManufacturingProcedurespng.png"; // plasmic-import: 7JUueBlYmFzPna/picture

export type PlasmicIndustryManufacturing__VariantMembers = {};
export type PlasmicIndustryManufacturing__VariantsArgs = {};
type VariantPropType = keyof PlasmicIndustryManufacturing__VariantsArgs;
export const PlasmicIndustryManufacturing__VariantProps =
  new Array<VariantPropType>();

export type PlasmicIndustryManufacturing__ArgsType = {};
type ArgPropType = keyof PlasmicIndustryManufacturing__ArgsType;
export const PlasmicIndustryManufacturing__ArgProps = new Array<ArgPropType>();

export type PlasmicIndustryManufacturing__OverridesType = {
  root?: p.Flex<"div">;
  reusableHeader?: p.Flex<typeof ReusableHeader>;
  hero?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  section1?: p.Flex<"div">;
  section2?: p.Flex<"div">;
  section3?: p.Flex<"div">;
  section4?: p.Flex<"div">;
  cta2?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultIndustryManufacturingProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

export function Head() {
  return <></>;
}

function PlasmicIndustryManufacturing__RenderFunc(props: {
  variants: PlasmicIndustryManufacturing__VariantsArgs;
  args: PlasmicIndustryManufacturing__ArgsType;
  overrides: PlasmicIndustryManufacturing__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgyi9F2CGadx1Xj()
  });

  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <ReusableHeader
            data-plasmic-name={"reusableHeader"}
            data-plasmic-override={overrides.reusableHeader}
            className={classNames("__wab_instance", sty.reusableHeader)}
          />

          <div
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            className={classNames(projectcss.all, sty.hero)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns___41Mb2)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__pTxg)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mhHzJ)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___8DNt9)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__pHaTo)}
                      displayHeight={"35px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"35px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: industryIconsManufacturingsvg3NgBo4E1JvuqFl,
                        fullWidth: 150,
                        fullHeight: 150,
                        aspectRatio: 1
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ruYo
                      )}
                    >
                      {"COACH FOR MANUFACTURING"}
                    </div>
                  </p.Stack>

                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "tablet") ? (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000" }}
                        >
                          {"Close the Skills Gap in Manufacturing with "}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#3E7CB1" }}
                        >
                          {"Employee Training"}
                        </span>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000" }}
                        >
                          {"Close the Skills Gap in Manufacturing with "}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#3E7CB1" }}
                        >
                          {"Employee Training"}
                        </span>
                      </React.Fragment>
                    )}
                  </h1>
                </p.Stack>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__o6Z2M
                  )}
                >
                  {
                    "Help your manufacturing company build stronger bonds with your staff, and turn them into highly educated and adaptable workers."
                  }
                </div>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__u0Wd
                  )}
                  component={Link}
                  href={"https://calendly.com/kalina-t/30min" as const}
                  platform={"gatsby"}
                  target={"_blank" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3Y7Rp
                    )}
                  >
                    {"BOOK A DEMO"}
                  </div>

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__bu2PG)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"15px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: buttonCaretWhitesvg2EkMgwDrEmqPnVl,
                      fullWidth: 108,
                      fullHeight: 150,
                      aspectRatio: 0.722222
                    }}
                  />
                </p.Stack>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.column___2XSe)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__rux33)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? ("80%" as const)
                      : ("auto" as const)
                  }
                  loading={"lazy" as const}
                  src={{
                    src: illustrationBannerManufacturingpngL8ZU0VxZo2YS1Y,
                    fullWidth: 920,
                    fullHeight: 760,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </p.Stack>
          </div>

          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img___6JstQ)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: crookedBg3SvgTQXwed72YVMhi,
              fullWidth: 300,
              fullHeight: 14,
              aspectRatio: 20.869565
            }}
          />

          <div
            data-plasmic-name={"section1"}
            data-plasmic-override={overrides.section1}
            className={classNames(projectcss.all, sty.section1)}
          >
            <div className={classNames(projectcss.all, sty.columns__qB2VP)}>
              <div className={classNames(projectcss.all, sty.column___4Lkfp)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vrcNs
                  )}
                >
                  {
                    "The Manufacturing Sector is a fast-paced industry, with an immediate need for educated and adaptable workers. \n\nEmerging technologies have transformed the industry - but have also created a void of workers missing the necessary skills. \n\nTraining workers is expensive but important to teach them the processes they need to excel at their jobs. \n\nUntrained staff members pose a number of costly and even dangerous problems: they work slower, they make mistakes and may cause accidents, or their work product might be subpar."
                  }
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rf4Zu
                  )}
                >
                  {"HOW CAN THE INDUSTRY BENEFIT FROM USING COACH?"}
                </div>
              </div>

              <div className={classNames(projectcss.all, sty.column__k47Om)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__oAcLa)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : ("282px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"100%" as const}
                  loading={"lazy" as const}
                  src={{
                    src: manufacturing1Png2ByeibGq8G67E1N,
                    fullWidth: 860,
                    fullHeight: 601,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </div>

          <div
            data-plasmic-name={"section2"}
            data-plasmic-override={overrides.section2}
            className={classNames(projectcss.all, sty.section2)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__odZ87)}
            >
              <div className={classNames(projectcss.all, sty.column__muAen)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__mjLLf)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"450px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: webOnboardingTrainingpngOUqtzJhkIipKw,
                    fullWidth: 900,
                    fullHeight: 980,
                    aspectRatio: undefined
                  }}
                />
              </div>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column___5W0Wl)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__be3Kh
                  )}
                >
                  {"Onboarding Training"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oVizl
                  )}
                >
                  {
                    "Studies show that new employees who go through a structured onboarding process are 58% more likely to stay with the organization after three years.\n\nCoach's onboarding solution helps you boost employee retention and productivity, leading to increased profits for your organization. Get your new hires up to speed quickly and efficiently with a tailored introduction to your organization and clear mapping of their responsibilities.\n"
                  }
                </div>
              </p.Stack>
            </p.Stack>
          </div>

          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__b2Em4)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: crookedBg4SvgEgHr6CfLReKtQ,
              fullWidth: 300,
              fullHeight: 14,
              aspectRatio: 20.869565
            }}
          />

          <div
            data-plasmic-name={"section3"}
            data-plasmic-override={overrides.section3}
            className={classNames(projectcss.all, sty.section3)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__kTwZo)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column___2H7X6)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ohj8A
                  )}
                >
                  {"Safety Training"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tkYyu
                  )}
                >
                  {
                    "Safety training ensures that employees know how to carry out the critical functions of their role safely. This not only keeps the employee themselves safe on the job, but also keeps their coworkers safe as well. \n\nWith Coach, you can keep your employees safe on the job by teaching them best practices and creating a workforce of proactive safety advocates. You will ensure your employees know how to operate and repair equipment safely and accurately. \n\nAnd what’s even more important is that with Coach you can refresh their knowledge on a regular basis, as well as keep track of how well employees are aware of the safety rules."
                  }
                </div>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.column__gEQlO)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img___3GmQj)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"450px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: webManufacturingSafetypngOmGcbIJqrKlVx,
                    fullWidth: 900,
                    fullHeight: 980,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </p.Stack>
          </div>

          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__gNbZ1)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: crookedBg3SvgTQXwed72YVMhi,
              fullWidth: 300,
              fullHeight: 14,
              aspectRatio: 20.869565
            }}
          />

          <div
            data-plasmic-name={"section4"}
            data-plasmic-override={overrides.section4}
            className={classNames(projectcss.all, sty.section4)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__diVUk)}
            >
              <div className={classNames(projectcss.all, sty.column__jIrts)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__rOuWv)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"450px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: webManufacturingProcedurespng7JUueBlYmFzPna,
                    fullWidth: 901,
                    fullHeight: 980,
                    aspectRatio: undefined
                  }}
                />
              </div>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__qnOvQ)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ad1Fo
                  )}
                >
                  {"Procedures, Processes and Machine Operating Training"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xTIb
                  )}
                >
                  {
                    "Process and equipment training is crucial in ensuring manufacturing employees have the necessary knowledge to perform their job functions efficiently.\n\nBy utilizing Coach, your team will learn complex procedures through hands-on training, leading to increased productivity and output for your organization.\n\nCoach’s assesment system ensures that your employees are retaining the information and are equipped to perform their job duties effectively."
                  }
                </div>
              </p.Stack>
            </p.Stack>
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"cta2"}
            data-plasmic-override={overrides.cta2}
            hasGap={true}
            className={classNames(projectcss.all, sty.cta2)}
          >
            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__yqUTv)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___57Zc5
                  )}
                >
                  {"READY TO START?"}
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__r1E47
                  )}
                >
                  {
                    "Experience the full power of Coach in action, and see why microlearning is your company’s future."
                  }
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xAv4)}
                >
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__mHqOp
                    )}
                    component={Link}
                    href={"https://calendly.com/kalina-t/30min" as const}
                    platform={"gatsby"}
                    target={"_blank" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1SEnQ
                      )}
                    >
                      {"GET STARTED"}
                    </div>

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___7RTB)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"15px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: buttonCaretWhitesvg2EkMgwDrEmqPnVl,
                        fullWidth: 108,
                        fullHeight: 150,
                        aspectRatio: 0.722222
                      }}
                    />
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            ) : null}
          </p.Stack>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "reusableHeader",
    "hero",
    "h1",
    "section1",
    "section2",
    "section3",
    "section4",
    "cta2",
    "footer"
  ],
  reusableHeader: ["reusableHeader"],
  hero: ["hero", "h1"],
  h1: ["h1"],
  section1: ["section1"],
  section2: ["section2"],
  section3: ["section3"],
  section4: ["section4"],
  cta2: ["cta2"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  reusableHeader: typeof ReusableHeader;
  hero: "div";
  h1: "h1";
  section1: "div";
  section2: "div";
  section3: "div";
  section4: "div";
  cta2: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIndustryManufacturing__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIndustryManufacturing__VariantsArgs;
    args?: PlasmicIndustryManufacturing__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicIndustryManufacturing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicIndustryManufacturing__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicIndustryManufacturing__ArgProps,
          internalVariantPropNames: PlasmicIndustryManufacturing__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicIndustryManufacturing__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIndustryManufacturing";
  } else {
    func.displayName = `PlasmicIndustryManufacturing.${nodeName}`;
  }
  return func;
}

export const PlasmicIndustryManufacturing = Object.assign(
  // Top-level PlasmicIndustryManufacturing renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    reusableHeader: makeNodeComponent("reusableHeader"),
    hero: makeNodeComponent("hero"),
    h1: makeNodeComponent("h1"),
    section1: makeNodeComponent("section1"),
    section2: makeNodeComponent("section2"),
    section3: makeNodeComponent("section3"),
    section4: makeNodeComponent("section4"),
    cta2: makeNodeComponent("cta2"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicIndustryManufacturing
    internalVariantProps: PlasmicIndustryManufacturing__VariantProps,
    internalArgProps: PlasmicIndustryManufacturing__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicIndustryManufacturing;
/* prettier-ignore-end */
